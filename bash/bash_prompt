#!/bin/bash

# Colors: http://web.archive.org/web/20131009193526/http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux

BLUE="$(tput setaf 75)"
GREY="$(tput setaf 243)"
RED="$(tput setaf 160)"
GREEN="$(tput setaf 193)"
RESET="$(tput sgr0)"

get_git_branch() {
  local branch_name

  # Get the short symbolic ref
  branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
  # If HEAD isn't a symbolic ref, get the short SHA
  branch_name=$(git rev-parse --short HEAD 2> /dev/null)

  printf $branch_name
}

get_git_info() {
  local git_info

  if ! $(git rev-parse --is-inside-work-tree &> /dev/null); then
    return 1
  fi

  git_info=$(get_git_branch)

  # Combine the branch name and state information
  if ! [[ $(git status 2>/dev/null) == *'working directory clean'* ]]; then
    git_info="$git_info [${RED}*${GREY}]"
  fi

  # Set the final branch string.
  printf "${GREY} on ${git_info}"
}

update_terminal_cwd() {
  # Identify the directory using a "file:" scheme URL,
  # including the host name to disambiguate local vs.
  # remote connections. Percent-escape spaces.
  local SEARCH=' '
  local REPLACE='%20'
  local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
  printf '\e]7;%s\a' "$PWD_URL"
}

prompt_command() {
  PS1="$(update_terminal_cwd)\n${BLUE}\w$(get_git_info)${RESET}\n‚ùØ "
}

PROMPT_COMMAND=prompt_command